[project]
name = "ohacker"
version = "0.1.0"
description = "Website hacker AI agent"
readme = "README.md"
requires-python = "==3.13.*"
license = "MIT"
authors = [
    { name = "Michał Pstrąg", email = "michal.pstrag@icloud.com"}
]
dependencies = [
    "logfire>=3.14.1",
    "loguru>=0.7.3",
    "openai-agents>=0.0.11",
    "playwright>=1.51.0",
]

[project.scripts]
hack = "ohacker.main:main"

[tool.uv]
dev-dependencies = [
    "pre-commit~=4.2.0",
    "pytest~=8.3.5",
    "pytest-asyncio~=0.26.0",
    "ruff~=0.11.6",
    "mypy~=1.15.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/ohacker"]

[tool.pytest]
norecursedirs = [
    '.git',
    '.tox',
    '.env',
    'dist',
    'build',
    'migrations',
    'docker',
    'config',
    'notebooks',
    'reseohackerh',
]
python_files = ['test_*.py']
addopts = [
    '-ra',
    '--showlocals',
    '--strict-markers',
    '--ignore=docs/conf.py',
    '--ignore=setup.py',
    '--ignore=ci',
    '--ignore=.eggs',
    '--doctest-modules',
    '--doctest-glob=\*.rst',
    '--tb=short',
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
warn_unused_ignores = false
show_error_codes = true
check_untyped_defs = true
no_implicit_optional = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "ohacker.*"
ignore_missing_imports = false
disallow_untyped_defs = true

[tool.ruff]
exclude = [".venv"]
extend-include = ["*.ipynb"]
line-length = 120

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
select = [
    # Default rules
    "E",    # pycodestyle errors
    "F",    # Pyflakes
    "C4",   # flake8-comprehensions
    "C90",  # mccabe complex structure
    "D",    # pydocstyle
    "I",    # isort
    "PT",   # flake8-pytest-style
    "PL",   # Pylint
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
    "S",    # flake8-bandit
    "ANN",  # flake8-annotations
    "B",    # flake8-bugbear
    "NPY",  # NumPy-specific rules
]
extend-select = [
    "RUF022",   # unsorted-dunder-all
    "PLR6301",  # no-self-use
]
ignore = [
    "B024",
    "B028",     # no-explicit-stacklevel, TODO confirm this
    "C901",     # complex-structure, TODO confirm this
    "D100",
    "D104",
    "D105",
    "D107",
    "D415",
    "D200",
    "D205",
    "D212",
    "ANN002",
    "ANN003",
    "ANN204",
    "PLR0913",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
    "PLR2004",
    "W293",
    "D101",  # D*** - we should not require docs in every Jupyter notebook
    "D102",
    "D103",
    "D107"
]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "PT011", # we prefer assert at the end of the test instead of using "match" parameter in pytest.raises
    "ANN201", # Missing return type annotation
    "PLR2004", # Magic numbers are ok in tests
]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120

[tool.ruff.lint.isort]
known-first-party = ["ohacker"]
known-third-party = [
    "IPython",
    "PIL",
    "cv2",
    "dotenv",
    "editdistance",
    "fastapi",
    "fire",
    "hydra",
    "joblib",
    "loguru",
    "luigi",
    "matplotlib",
    "neptune",
    "neptune_config",
    "nltk",
    "numpy",
    "omegaconf",
    "pandas",
    "pqdm",
    "pydantic",
    "pytest",
    "pytorch_lightning",
    "requests",
    "scipy",
    "setuptools",
    "shapely",
    "skimage",
    "sklearn",
    "streamlit",
    "torch",
    "torchvision",
    "tqdm",
    "typer",
]
